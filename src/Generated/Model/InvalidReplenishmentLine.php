<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JeffreyKroonen\BolRetailer\Generated\Model;

class InvalidReplenishmentLine
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Type of invalid replenishment line, in case the BSKU and/or EAN cannot be determined for this replenishment line.
     *
     * @var string
     */
    protected $type;
    /**
     * The amount of announced quantity for this replenishment line.
     *
     * @var int
     */
    protected $quantityAnnounced;
    /**
     * The amount of received quantity for this replenishment line.
     *
     * @var int
     */
    protected $quantityReceived;
    /**
     * The amount of quantity that is still in progress at the warehouse for this replenishment line.
     *
     * @var int
     */
    protected $quantityInProgress;
    /**
     * The quantity within this shipment line that has a graded (unsalable) state.
     *
     * @var int
     */
    protected $quantityWithGradedState;
    /**
     * The quantity within this shipment line that has a regular (salable) state.
     *
     * @var int
     */
    protected $quantityWithRegularState;

    /**
     * Type of invalid replenishment line, in case the BSKU and/or EAN cannot be determined for this replenishment line.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Type of invalid replenishment line, in case the BSKU and/or EAN cannot be determined for this replenishment line.
     */
    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * The amount of announced quantity for this replenishment line.
     */
    public function getQuantityAnnounced(): int
    {
        return $this->quantityAnnounced;
    }

    /**
     * The amount of announced quantity for this replenishment line.
     */
    public function setQuantityAnnounced(int $quantityAnnounced): self
    {
        $this->initialized['quantityAnnounced'] = true;
        $this->quantityAnnounced = $quantityAnnounced;

        return $this;
    }

    /**
     * The amount of received quantity for this replenishment line.
     */
    public function getQuantityReceived(): int
    {
        return $this->quantityReceived;
    }

    /**
     * The amount of received quantity for this replenishment line.
     */
    public function setQuantityReceived(int $quantityReceived): self
    {
        $this->initialized['quantityReceived'] = true;
        $this->quantityReceived = $quantityReceived;

        return $this;
    }

    /**
     * The amount of quantity that is still in progress at the warehouse for this replenishment line.
     */
    public function getQuantityInProgress(): int
    {
        return $this->quantityInProgress;
    }

    /**
     * The amount of quantity that is still in progress at the warehouse for this replenishment line.
     */
    public function setQuantityInProgress(int $quantityInProgress): self
    {
        $this->initialized['quantityInProgress'] = true;
        $this->quantityInProgress = $quantityInProgress;

        return $this;
    }

    /**
     * The quantity within this shipment line that has a graded (unsalable) state.
     */
    public function getQuantityWithGradedState(): int
    {
        return $this->quantityWithGradedState;
    }

    /**
     * The quantity within this shipment line that has a graded (unsalable) state.
     */
    public function setQuantityWithGradedState(int $quantityWithGradedState): self
    {
        $this->initialized['quantityWithGradedState'] = true;
        $this->quantityWithGradedState = $quantityWithGradedState;

        return $this;
    }

    /**
     * The quantity within this shipment line that has a regular (salable) state.
     */
    public function getQuantityWithRegularState(): int
    {
        return $this->quantityWithRegularState;
    }

    /**
     * The quantity within this shipment line that has a regular (salable) state.
     */
    public function setQuantityWithRegularState(int $quantityWithRegularState): self
    {
        $this->initialized['quantityWithRegularState'] = true;
        $this->quantityWithRegularState = $quantityWithRegularState;

        return $this;
    }
}
