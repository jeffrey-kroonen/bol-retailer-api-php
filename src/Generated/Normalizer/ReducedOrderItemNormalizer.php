<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JeffreyKroonen\BolRetailer\Generated\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use JeffreyKroonen\BolRetailer\Generated\Runtime\Normalizer\CheckArray;
use JeffreyKroonen\BolRetailer\Generated\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ReducedOrderItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null): bool
    {
        return $type === 'JeffreyKroonen\\BolRetailer\\Generated\\Model\\ReducedOrderItem';
    }

    public function supportsNormalization($data, $format = null): bool
    {
        return $data instanceof \JeffreyKroonen\BolRetailer\Generated\Model\ReducedOrderItem;
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \JeffreyKroonen\BolRetailer\Generated\Model\ReducedOrderItem();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('orderItemId', $data)) {
            $object->setOrderItemId($data['orderItemId']);
        }
        if (\array_key_exists('ean', $data)) {
            $object->setEan($data['ean']);
        }
        if (\array_key_exists('fulfilmentMethod', $data)) {
            $object->setFulfilmentMethod($data['fulfilmentMethod']);
        }
        if (\array_key_exists('fulfilmentStatus', $data)) {
            $object->setFulfilmentStatus($data['fulfilmentStatus']);
        }
        if (\array_key_exists('quantity', $data)) {
            $object->setQuantity($data['quantity']);
        }
        if (\array_key_exists('quantityShipped', $data)) {
            $object->setQuantityShipped($data['quantityShipped']);
        }
        if (\array_key_exists('quantityCancelled', $data)) {
            $object->setQuantityCancelled($data['quantityCancelled']);
        }
        if (\array_key_exists('cancellationRequest', $data)) {
            $object->setCancellationRequest($data['cancellationRequest']);
        }
        if (\array_key_exists('latestChangedDateTime', $data)) {
            $object->setLatestChangedDateTime(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['latestChangedDateTime']));
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['orderItemId'] = $object->getOrderItemId();
        $data['ean'] = $object->getEan();
        $data['fulfilmentMethod'] = $object->getFulfilmentMethod();
        $data['fulfilmentStatus'] = $object->getFulfilmentStatus();
        $data['quantity'] = $object->getQuantity();
        $data['quantityShipped'] = $object->getQuantityShipped();
        $data['quantityCancelled'] = $object->getQuantityCancelled();
        $data['cancellationRequest'] = $object->getCancellationRequest();
        $data['latestChangedDateTime'] = $object->getLatestChangedDateTime()->format('Y-m-d\\TH:i:sP');

        return $data;
    }
}
