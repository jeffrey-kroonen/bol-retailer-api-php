<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JeffreyKroonen\BolRetailer\Generated\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use JeffreyKroonen\BolRetailer\Generated\Runtime\Normalizer\CheckArray;
use JeffreyKroonen\BolRetailer\Generated\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrderOrderItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null): bool
    {
        return $type === 'JeffreyKroonen\\BolRetailer\\Generated\\Model\\OrderOrderItem';
    }

    public function supportsNormalization($data, $format = null): bool
    {
        return $data instanceof \JeffreyKroonen\BolRetailer\Generated\Model\OrderOrderItem;
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \JeffreyKroonen\BolRetailer\Generated\Model\OrderOrderItem();
        if (\array_key_exists('unitPrice', $data) && \is_int($data['unitPrice'])) {
            $data['unitPrice'] = (float) $data['unitPrice'];
        }
        if (\array_key_exists('commission', $data) && \is_int($data['commission'])) {
            $data['commission'] = (float) $data['commission'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('orderItemId', $data)) {
            $object->setOrderItemId($data['orderItemId']);
        }
        if (\array_key_exists('cancellationRequest', $data)) {
            $object->setCancellationRequest($data['cancellationRequest']);
        }
        if (\array_key_exists('fulfilment', $data)) {
            $object->setFulfilment($this->denormalizer->denormalize($data['fulfilment'], 'JeffreyKroonen\\BolRetailer\\Generated\\Model\\OrderFulfilment', 'json', $context));
        }
        if (\array_key_exists('offer', $data)) {
            $object->setOffer($this->denormalizer->denormalize($data['offer'], 'JeffreyKroonen\\BolRetailer\\Generated\\Model\\OrderOffer', 'json', $context));
        }
        if (\array_key_exists('product', $data)) {
            $object->setProduct($this->denormalizer->denormalize($data['product'], 'JeffreyKroonen\\BolRetailer\\Generated\\Model\\OrderProduct', 'json', $context));
        }
        if (\array_key_exists('quantity', $data)) {
            $object->setQuantity($data['quantity']);
        }
        if (\array_key_exists('quantityShipped', $data)) {
            $object->setQuantityShipped($data['quantityShipped']);
        }
        if (\array_key_exists('quantityCancelled', $data)) {
            $object->setQuantityCancelled($data['quantityCancelled']);
        }
        if (\array_key_exists('unitPrice', $data)) {
            $object->setUnitPrice($data['unitPrice']);
        }
        if (\array_key_exists('commission', $data)) {
            $object->setCommission($data['commission']);
        }
        if (\array_key_exists('additionalServices', $data)) {
            $values = [];
            foreach ($data['additionalServices'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'JeffreyKroonen\\BolRetailer\\Generated\\Model\\AdditionalService', 'json', $context);
            }
            $object->setAdditionalServices($values);
        }
        if (\array_key_exists('latestChangedDateTime', $data)) {
            $object->setLatestChangedDateTime(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['latestChangedDateTime']));
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if ($object->isInitialized('orderItemId') && null !== $object->getOrderItemId()) {
            $data['orderItemId'] = $object->getOrderItemId();
        }
        if ($object->isInitialized('cancellationRequest') && null !== $object->getCancellationRequest()) {
            $data['cancellationRequest'] = $object->getCancellationRequest();
        }
        if ($object->isInitialized('fulfilment') && null !== $object->getFulfilment()) {
            $data['fulfilment'] = $this->normalizer->normalize($object->getFulfilment(), 'json', $context);
        }
        if ($object->isInitialized('offer') && null !== $object->getOffer()) {
            $data['offer'] = $this->normalizer->normalize($object->getOffer(), 'json', $context);
        }
        if ($object->isInitialized('product') && null !== $object->getProduct()) {
            $data['product'] = $this->normalizer->normalize($object->getProduct(), 'json', $context);
        }
        if ($object->isInitialized('quantity') && null !== $object->getQuantity()) {
            $data['quantity'] = $object->getQuantity();
        }
        if ($object->isInitialized('quantityShipped') && null !== $object->getQuantityShipped()) {
            $data['quantityShipped'] = $object->getQuantityShipped();
        }
        if ($object->isInitialized('quantityCancelled') && null !== $object->getQuantityCancelled()) {
            $data['quantityCancelled'] = $object->getQuantityCancelled();
        }
        if ($object->isInitialized('unitPrice') && null !== $object->getUnitPrice()) {
            $data['unitPrice'] = $object->getUnitPrice();
        }
        if ($object->isInitialized('commission') && null !== $object->getCommission()) {
            $data['commission'] = $object->getCommission();
        }
        if ($object->isInitialized('additionalServices') && null !== $object->getAdditionalServices()) {
            $values = [];
            foreach ($object->getAdditionalServices() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['additionalServices'] = $values;
        }
        $data['latestChangedDateTime'] = $object->getLatestChangedDateTime()->format('Y-m-d\\TH:i:sP');

        return $data;
    }
}
